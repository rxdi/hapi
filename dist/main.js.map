{"version":3,"sources":["hapi.module.config.ts","services/server/server.service.ts","plugins/hapi.plugin.ts","plugins/inert/inert.plugin.ts","services/open/open.service.ts","plugins/index.ts","services/index.ts","main.ts"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"../src","sourcesContent":["import { InjectionToken } from \"@rxdi/core\";\nimport { PluginNameVersion, PluginBase, PluginPackage, ServerOptions, ServerRoute } from 'hapi';\n\nexport class HapiConfigModel  {\n    randomPort?: boolean;\n    staticConfig?: ServerRoute | ServerRoute[] = {\n        method: 'GET',\n        path: '/public/{param*}',\n        handler: {\n            directory: {\n                path: 'public',\n                index: ['index.html', 'default.html']\n            }\n        }\n    };\n    hapi?: ServerOptions;\n    plugins?: Array<PluginBase<any> & (PluginNameVersion | PluginPackage)>;\n\n}\n\nexport const HAPI_CONFIG = new InjectionToken<HapiConfigModel>('hapi-config-injection-token');\nexport const HAPI_SERVER = new InjectionToken<any>('hapi-server-injection-token');\nexport const HAPI_PLUGINS = new InjectionToken<Array<PluginBase<any> & (PluginNameVersion | PluginPackage)>>('hapi-plugins-injection-token');","import { Service, Inject, BootstrapLogger, ExitHandlerService } from \"@rxdi/core\";\nimport { HAPI_SERVER, HAPI_PLUGINS } from \"../../hapi.module.config\";\nimport { Server, PluginBase, PluginNameVersion, PluginPackage } from \"hapi\";\n\nexport type PluginType<T> = (PluginBase<T> & (PluginNameVersion | PluginPackage))[];\n\n@Service()\nexport class ServerService {\n\n    constructor(\n        @Inject(HAPI_SERVER) private server: Server,\n        @Inject(HAPI_PLUGINS) private plugins: PluginType<any>,\n        private logger: BootstrapLogger,\n        private exitHandler: ExitHandlerService\n    ) {\n        this.exitHandler.errorHandler.subscribe(async () => await this.server.stop());\n    }\n\n    async start() {\n        if (this.plugins.length) {\n            await this.registerPlugins(this.plugins);\n        }\n        try {\n            await this.server.start();\n        }\n        catch (err) {\n            throw new Error(err);\n        }\n        this.logger.log(\n            `\n            Server running at: http://${this.server.info.address}:${this.server.info.port},\n            Environment: ${process.env.NODE_ENV || 'development'}\n            `\n        );\n    }\n\n    async registerPlugins<T>(plugins: PluginType<T>) {\n        return await Promise.all(plugins.map(async p => await this.server.register(p)))\n    }\n\n}","import { Plugin, PluginInterface } from \"@rxdi/core\";\nimport { ServerService } from \"../services/server/server.service\";\n\n@Plugin()\nexport class HapiPlugin implements PluginInterface {\n\n  constructor(\n    private server: ServerService\n  ) { }\n\n  async register() {\n    return await this.server.start();\n  }\n\n}\n","import { Inject, Plugin } from \"@rxdi/core\";\nimport { HAPI_SERVER, HAPI_CONFIG, HapiConfigModel } from \"../../hapi.module.config\";\nimport { Server } from \"hapi\";\nimport inert = require('inert');\n\n@Plugin()\nexport class InertPlugin {\n\n    constructor(\n        @Inject(HAPI_SERVER) private server: Server,\n        @Inject(HAPI_CONFIG) private config: HapiConfigModel\n    ) {}\n\n    OnInit() {\n        this.register();\n    }\n\n    async register() {\n        await this.registerInertPlugin();\n        if (this.config.staticConfig) {\n            this.server.route(this.config.staticConfig);\n        }\n    }\n\n    async registerInertPlugin() {\n        await this.server.register(inert);\n\n    }\n\n}","import { Service, Inject } from \"@rxdi/core\";\nimport open = require('open');\nimport { HAPI_SERVER } from \"../../hapi.module.config\";\nimport { Server } from \"hapi\";\n\n@Service()\nexport class OpenService {\n\n    constructor(\n        @Inject(HAPI_SERVER) private server: Server,\n    ) { }\n\n    async openServerPage() {\n        await open(`http://${this.server.info.address}:${this.server.info.port}/public`);\n    }\n\n    async openGraphQLPage() {\n        await open(`http://${this.server.info.address}:${this.server.info.port}/graphiql`);\n    }\n\n    async openPage(link) {\n        await open(link);\n    }\n\n}","export * from './hapi.plugin';\nexport * from './inert/inert.plugin';","export * from './server/server.service';\nexport * from './open/open.service';","import { Server } from 'hapi';\nimport { HapiPlugin } from './plugins/hapi.plugin';\nimport { ServerService } from './services/server/server.service';\nimport { ModuleWithServices, Module } from '@rxdi/core';\nimport { HAPI_CONFIG, HapiConfigModel, HAPI_SERVER, HAPI_PLUGINS } from './hapi.module.config';\nimport { InertPlugin } from './plugins/inert/inert.plugin';\nimport { OpenService } from './services/open/open.service';\n\n@Module({\n    services: [ServerService, OpenService],\n    plugins: [HapiPlugin, InertPlugin]\n})\nexport class HapiModule {\n    public static forRoot(config?: HapiConfigModel): ModuleWithServices {\n        config = Object.assign({}, config || new HapiConfigModel());\n        config.randomPort && config.hapi.port ? config.hapi.port = null : null;\n        return {\n            module: HapiModule,\n            services: [\n                {\n                    provide: HAPI_CONFIG,\n                    useValue: config || new HapiConfigModel()\n                },\n                {\n                    provide: HAPI_SERVER,\n                    deps: [HAPI_CONFIG],\n                    useFactory: (config: HapiConfigModel) => {\n                        delete config.plugins;\n                        return new Server(config.hapi);\n                    }\n                },\n                {\n                    provide: HAPI_PLUGINS,\n                    useValue: config.plugins || []\n                },\n            ],\n        };\n    }\n}\n\nexport * from './hapi.module.config';\nexport * from './plugins/index';\nexport * from './services/index';"]}